#!/usr/bin/env node

/*
 * Grasspiler / grasspile
 * copyright (c) 2016 Susisu
 */

"use strict";

const fs = require("fs");

const co = require("co");
const lq = require("loquat");

let program = require("commander");

let gp = require("../lib/grasspiler.js");
let packageInfo = require("../package.json");

const INIT_ENV = gp.utils.List.empty().cons("IN").cons("CHAR_w").cons("SUCC").cons("OUT");
const HW_CHARS = Object.freeze({ w: "w", W: "W", v: "v" });
const FW_CHARS = Object.freeze({ w: "ｗ", W: "Ｗ", v: "ｖ" });

process.title = "grasspile";
process.stdin.setEncoding("utf8");

program.usage("[options] <srcfile>");
program.version(packageInfo.version, "-v, --version");
program.option("-o, --output <file>", "write output to <file> (if not specified, write output to stdout)");
program.option("-f, --fullwidth", "use full-width characters");
program.option("-w, --width <value>", "shape output with width <value>");
program.parse(process.argv);

let main = co(function * () {
    if (program.args.length === 0) {
        program.help();
    }
    const SRCFILE   = program.args[0];
    const OUTFILE   = program["output"];
    const FULLWIDTH = program["fullwidth"];
    const WIDTH     = program["width"];
    // input
    let src = yield readFile(SRCFILE, { encoding: "utf8" });
    // parse
    let defs  = gp.parser.parse(SRCFILE, src);
    // transform
    let term = gp.transf.defsToDeBruijnIndexed(defs, INIT_ENV);
    term = gp.transf.aNormalize(term);
    term = gp.transf.grassNormalize(term);
    term = gp.transf.lambdaLift(term);
    term = gp.transf.optimize(term);
    let grasses = gp.transf.plant(term, FULLWIDTH ? FW_CHARS : HW_CHARS);
    // shape
    if (WIDTH === undefined || WIDTH <= 0) {
        grasses = grasses + "\n";
    }
    else {
        grasses = shape(grasses, WIDTH);
    }
    // output
    if (OUTFILE === undefined) {
        process.stdout.write(grasses);
    }
    else {
        yield writeFile(OUTFILE, grasses, { encoding: "utf8" });
    }
}).catch(error => {
    console.error(String(error));
    process.exit(1);
});

function readFile(filename, options) {
    return new Promise((resolve, reject) => {
        fs.readFile(filename, options, (error, data) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(data);
            }
        })
    });
}

function writeFile(filename, data, options) {
    return new Promise((resolve, reject) => {
        fs.writeFile(filename, data, options, error => {
            if (error) {
                reject(error);
            }
            else {
                resolve(undefined);
            }
        })
    });
}

function shape(text, width) {
    let res = "";
    let len = text.length;
    let i   = 0;
    while (i * width < len) {
        res += text.substr(i * width, width) + "\n";
        i++;
    }
    return res;
}
